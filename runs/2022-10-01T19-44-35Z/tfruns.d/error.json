{
  "message": "object 'tf' not found",
  "traceback": ["compile.keras.engine.training.Model(., loss = \"categorical_crossentropy\", \n    optimizer = optimizer_rmsprop(), metrics = tf$keras$metrics$AUC())", "compile(., loss = \"categorical_crossentropy\", optimizer = optimizer_rmsprop(), \n    metrics = tf$keras$metrics$AUC())", "fit(., x = train_data, y = train_labels, epochs = 50, batch_size = 256, \n    validation_split = 0.2, callbacks = list(callback_early_stopping(patience = 20), \n        callback_reduce_lr_on_plateau()), verbose = 2)", "keras_model_sequential() %>% layer_dense(units = FLAGS$nodes_layer1, \n    activation = \"relu\", input_shape = ncol(x)) %>% layer_batch_normalization() %>% \n    layer_dropout(rate = FLAGS$dropout_layer1) %>% layer_dense(units = FLAGS$nodes_layer2, \n    activation = \"relu\") %>% layer_batch_normalization() %>% \n    layer_dropout(rate = FLAGS$dropout_layer2) %>% layer_dense(units = FLAGS$nodes_layer3, \n    activation = \"relu\") %>% layer_batch_normalization() %>% \n    layer_dropout(rate = FLAGS$dropout_layer3) %>% layer_dense(units = 2, \n    activation = \"sigmoid\") %>% compile(loss = \"categorical_crossentropy\", \n    optimizer = optimizer_rmsprop(), metrics = tf$keras$metrics$AUC()) %>% \n    fit(x = train_data, y = train_labels, epochs = 50, batch_size = 256, \n        validation_split = 0.2, callbacks = list(callback_early_stopping(patience = 20), \n            callback_reduce_lr_on_plateau()), verbose = 2)", "eval(ei, envir)", "eval(ei, envir)", "withVisible(eval(ei, envir))", "tuning_run(\"keras_grid_search.R\", flags = list(nodes_layer1 = c(64, \n    128, 256), nodes_layer2 = c(64, 128, 256), nodes_layer3 = c(64, \n    128, 256), dropout_layer1 = c(0.2, 0.3, 0.4), dropout_layer2 = c(0.2, \n    0.3, 0.4), dropout_layer3 = c(0.2, 0.3, 0.4)), confirm = FALSE, \n    echo = FALSE, sample = 0.01)"]
}
